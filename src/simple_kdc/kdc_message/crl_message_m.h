//
// Generated file, do not edit! Created by opp_msgc 4.2 from src/simple_kdc/kdc_message/crl_message.msg.
//

#ifndef _CRL_MESSAGE_M_H_
#define _CRL_MESSAGE_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#ifndef DOXYGEN_SHOULD_SKIP_THIS
#include "PASER_Definitions.h"
#include "compatibility.h"
// }}

// cplusplus {{
#endif
// }}



/**
 * Class generated from <tt>src/simple_kdc/kdc_message/crl_message.msg</tt> by opp_msgc.
 * <pre>
 * packet crl_message {
 *     In_addr src;
 *     In_addr gwAddr;
 *     In_addr nextHopAddr;
 *     int cert_len;
 *     char cert_array[];
 *     
 *     int kdc_gtk_len;
 *     char kdc_gtk_array[];
 *     int kdc_nonce;
 *     int kdc_crl_len;
 *     char kdc_crl_array[];
 *     int kdc_cert_len;
 *     char kdc_cert_array[];
 *     int kdc_sign_len;
 *     char kdc_sign_array[];
 *     int kdc_key_nr;
 *     int kdc_sign_key_len;
 *     char kdc_sign_key_array[];
 *     
 *     
 *     
 * }
 * </pre>
 */
class crl_message : public ::cPacket
{
  protected:
    In_addr src_var;
    In_addr gwAddr_var;
    In_addr nextHopAddr_var;
    int cert_len_var;
    char *cert_array_var; // array ptr
    unsigned int cert_array_arraysize;
    int kdc_gtk_len_var;
    char *kdc_gtk_array_var; // array ptr
    unsigned int kdc_gtk_array_arraysize;
    int kdc_nonce_var;
    int kdc_crl_len_var;
    char *kdc_crl_array_var; // array ptr
    unsigned int kdc_crl_array_arraysize;
    int kdc_cert_len_var;
    char *kdc_cert_array_var; // array ptr
    unsigned int kdc_cert_array_arraysize;
    int kdc_sign_len_var;
    char *kdc_sign_array_var; // array ptr
    unsigned int kdc_sign_array_arraysize;
    int kdc_key_nr_var;
    int kdc_sign_key_len_var;
    char *kdc_sign_key_array_var; // array ptr
    unsigned int kdc_sign_key_array_arraysize;

  private:
    void copy(const crl_message& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const crl_message&);

  public:
    crl_message(const char *name=NULL, int kind=0);
    crl_message(const crl_message& other);
    virtual ~crl_message();
    crl_message& operator=(const crl_message& other);
    virtual crl_message *dup() const {return new crl_message(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual In_addr& getSrc();
    virtual const In_addr& getSrc() const {return const_cast<crl_message*>(this)->getSrc();}
    virtual void setSrc(const In_addr& src);
    virtual In_addr& getGwAddr();
    virtual const In_addr& getGwAddr() const {return const_cast<crl_message*>(this)->getGwAddr();}
    virtual void setGwAddr(const In_addr& gwAddr);
    virtual In_addr& getNextHopAddr();
    virtual const In_addr& getNextHopAddr() const {return const_cast<crl_message*>(this)->getNextHopAddr();}
    virtual void setNextHopAddr(const In_addr& nextHopAddr);
    virtual int getCert_len() const;
    virtual void setCert_len(int cert_len);
    virtual void setCert_arrayArraySize(unsigned int size);
    virtual unsigned int getCert_arrayArraySize() const;
    virtual char getCert_array(unsigned int k) const;
    virtual void setCert_array(unsigned int k, char cert_array);
    virtual int getKdc_gtk_len() const;
    virtual void setKdc_gtk_len(int kdc_gtk_len);
    virtual void setKdc_gtk_arrayArraySize(unsigned int size);
    virtual unsigned int getKdc_gtk_arrayArraySize() const;
    virtual char getKdc_gtk_array(unsigned int k) const;
    virtual void setKdc_gtk_array(unsigned int k, char kdc_gtk_array);
    virtual int getKdc_nonce() const;
    virtual void setKdc_nonce(int kdc_nonce);
    virtual int getKdc_crl_len() const;
    virtual void setKdc_crl_len(int kdc_crl_len);
    virtual void setKdc_crl_arrayArraySize(unsigned int size);
    virtual unsigned int getKdc_crl_arrayArraySize() const;
    virtual char getKdc_crl_array(unsigned int k) const;
    virtual void setKdc_crl_array(unsigned int k, char kdc_crl_array);
    virtual int getKdc_cert_len() const;
    virtual void setKdc_cert_len(int kdc_cert_len);
    virtual void setKdc_cert_arrayArraySize(unsigned int size);
    virtual unsigned int getKdc_cert_arrayArraySize() const;
    virtual char getKdc_cert_array(unsigned int k) const;
    virtual void setKdc_cert_array(unsigned int k, char kdc_cert_array);
    virtual int getKdc_sign_len() const;
    virtual void setKdc_sign_len(int kdc_sign_len);
    virtual void setKdc_sign_arrayArraySize(unsigned int size);
    virtual unsigned int getKdc_sign_arrayArraySize() const;
    virtual char getKdc_sign_array(unsigned int k) const;
    virtual void setKdc_sign_array(unsigned int k, char kdc_sign_array);
    virtual int getKdc_key_nr() const;
    virtual void setKdc_key_nr(int kdc_key_nr);
    virtual int getKdc_sign_key_len() const;
    virtual void setKdc_sign_key_len(int kdc_sign_key_len);
    virtual void setKdc_sign_key_arrayArraySize(unsigned int size);
    virtual unsigned int getKdc_sign_key_arrayArraySize() const;
    virtual char getKdc_sign_key_array(unsigned int k) const;
    virtual void setKdc_sign_key_array(unsigned int k, char kdc_sign_key_array);
};

inline void doPacking(cCommBuffer *b, crl_message& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, crl_message& obj) {obj.parsimUnpack(b);}


#endif // _CRL_MESSAGE_M_H_
